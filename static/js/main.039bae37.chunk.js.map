{"version":3,"sources":["img/adeole_yosemite.jpg","pages/home/Home.jsx","pages/loading/Loading.jsx","App.js","hooks/useProgressiveImage.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","useStyles","makeStyles","theme","root","width","marginTop","spacing","height","position","backgroundColor","zIndex","Loading","loaded","children","classes","useState","isLoaded","setIsLoaded","setTimeout","Fragment","Fade","in","LinearProgress","App","src","sourceLoaded","setSourceLoaded","img","Image","onload","data","useProgressiveImage","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,6C,qKCG5B,SAASC,IACtB,OACE,iCACE,yBAAKC,UAAU,OACb,0CACA,+HACE,6BADF,yEAEE,6BAFF,qG,qDCHFC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACP,YAAa,CACXC,UAAWH,EAAMI,QAAQ,IAE3BC,OAAQ,QACRC,SAAU,WACVC,gBAAiB,QACjBC,OAAQ,OAKG,SAASC,EAAT,GAAwC,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SAClCC,EAAUd,IADoC,EAEpBe,oBAAS,GAFW,mBAE7CC,EAF6C,KAEnCC,EAFmC,KAIpD,OADAC,YAAW,WAAQD,GAAY,KAAS,KAEtC,kBAAC,IAAME,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,IAAKL,GACT,yBAAKjB,UAAWe,EAAQX,MACtB,kBAACmB,EAAA,EAAD,QAGHV,GAAUC,GCxBF,SAASU,IACtB,IAAMX,ECL2B,SAAAY,GAAQ,IAAD,EACAT,oBAAS,GADT,mBACjCU,EADiC,KACnBC,EADmB,KAGlCC,EAAM,IAAIC,MAShB,OAPAD,EAAIH,IAAMA,EACVG,EAAIE,OAAS,SAACC,GACPL,GACHC,GAAgB,IAIbD,EDPQM,CAAoBC,KAEnC,OACE,kBAACrB,EAAD,CAASC,OAAQA,GACf,kBAACd,EAAD,OECcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjB,EAAD,OAEFkB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.039bae37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/adeole_yosemite.f81ade71.jpg\";","import React from 'react';\r\nimport './home.css';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <section>\r\n      <div className=\"box\">\r\n        <h2>Bienvenido</h2>\r\n        <p>Este es mi sito web, soy un desarrollador de tiempo completo, me entusiasma mucho la programacion\r\n          <br />y deseo algun dia poder lograr mis sue√±os a traves de mis programas\r\n          <br />Aqui dejo unos links para que puedas ver mis trabajos, muchas gracias por visitar mi sitio web!</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Fade } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    height: '100vh',\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    zIndex: 3\r\n  },\r\n}));\r\n\r\n\r\nexport default function Loading({ loaded, children }) {\r\n  const classes = useStyles();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  setTimeout(() => { setIsLoaded(true) }, 1000);\r\n  return (\r\n    <React.Fragment>\r\n      <Fade in={!isLoaded}>\r\n        <div className={classes.root}>\r\n          <LinearProgress />\r\n        </div>\r\n      </Fade>\r\n      {loaded && children}\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\nimport Home from './pages/home/Home'\nimport { useProgressiveImage } from './hooks/useProgressiveImage';\nimport backgroundImage from './img/adeole_yosemite.jpg'\nimport Loading from './pages/loading/Loading';\n\nexport default function App() {\n  const loaded = useProgressiveImage(backgroundImage);\n\n  return (\n    <Loading loaded={loaded}>\n      <Home />\n    </Loading>\n  )\n}\n\n","import { useState } from 'react';\r\n\r\nexport const useProgressiveImage = src => {\r\n  const [sourceLoaded, setSourceLoaded] = useState(false)\r\n\r\n  const img = new Image()\r\n\r\n  img.src = src\r\n  img.onload = (data) => {\r\n    if (!sourceLoaded) {\r\n      setSourceLoaded(true);\r\n    }\r\n  }\r\n\r\n  return sourceLoaded\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}